int n,m,k,ans,tot,flow;
struct edge{int from,to,v,c;};
struct Net{
    edge E[M];
    int head[N],next[M],cnt;
    void ins(int x,int y,int z,int c){
        E[++cnt]=(edge){x,y,z,c};
        next[cnt]=head[x]; head[x]=cnt;
    }
    void add(int x,int y,int z,int c){
        ins(x,y,z,c); ins(y,x,0,-c);
    }
    int from[N],Q[M],d[N],S,T,ss;
    bool inq[N];
    bool spfa(){
        int l=0,r=-1;
        F(i,1,T) d[i]=INF;
        d[S]=0; Q[++r]=S; inq[S]=1;
        while(l<=r){
            int x=Q[l++];
            inq[x]=0;
            for(int i=head[x];i;i=next[i])
                if(E[i].v>0 && d[x]+E[i].c<d[E[i].to]){
                    d[E[i].to]=d[x]+E[i].c;
                    from[E[i].to]=i;
                    if (!inq[E[i].to]){
                        Q[++r]=E[i].to;
                        inq[E[i].to]=1;
                    }
                }
        }
        return d[T]!=INF;
    }
    void mcf(){
        int x=INF;
        for(int i=from[T];i;i=from[E[i].from])
            x=min(x,E[i].v);
        for(int i=from[T];i;i=from[E[i].from]){
            E[i].v-=x;
            E[i^1].v+=x;
        }
        flow+=x;
        ans+=x*d[T];
    }
    void init(){
        n=getint(); m=getint(); k=getint();
        flow=tot=ans=0; cnt=1; memset(head,0,sizeof head);
        S=0; ss=n+n+1; T=n+n+2;
        int x,y,z;
        F(i,1,n){
            x=getint(); tot+=x;
            add(S,i,x,0);
            if (i<n) add(i,i+1,INF,0);
            add(ss,i+n,INF,0);
            add(i+n,T,x,0);
        }
        F(i,1,m){
            x=getint(); y=getint();
            add(S,ss,x,y);
        }
        F(i,1,k){
            x=getint(); y=getint();
            F(j,1,n) if(j+x+1<=n) add(j,j+n+x+1,INF,y);
            else break;
        }
        while(spfa()) mcf();
        if (flow==tot) printf("%d\n",ans);
        else puts("impossible");
    }
}G1;
 